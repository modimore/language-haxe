'.source.haxe':

    '#if':
        'prefix': '#if'
        'body': '#if ${1:<flag>}\n#end$0'
        'description': 'Conditional Compilation'
        'descriptionMoreURL': 'http://haxe.org/manual/lf-condition-compilation.html'
    '#else':
        'prefix': '#else'
        'body': '#else$0'
        'description': 'Conditional Compilation'
        'descriptionMoreURL': 'http://haxe.org/manual/lf-condition-compilation.html'
    '#elseif':
        'prefix': '#elseif'
        'body': '#elseif ${1:<flag>}$0'
        'description': 'Conditional Compilation'
        'descriptionMoreURL': 'http://haxe.org/manual/lf-condition-compilation.html'
    '#end':
        'prefix': '#end'
        'body': '#end$0'
        'description': 'Conditional Compilation'
        'descriptionMoreURL': 'http://haxe.org/manual/lf-condition-compilation.html'
    '#else error':
        'prefix': '#error'
        'body': '#error "${1:<flag>}"$0'
        'description': 'Conditional Compilation'
        'descriptionMoreURL': 'http://haxe.org/manual/lf-condition-compilation.html'

    'Line Comment Start':
        'prefix': '//'
        'body': '// ${1:}$0'
    'Block Comment Start':
        'prefix': '/**'
        'body': '/**\n\t$1\n*/$0'
        'description': 'Block comment'

    'trace':
        'prefix': 'trace'
        'body': 'trace( $1 )$0'
        'description': 'Print information'
        'descriptionMoreURL': 'http://haxe.org/manual/lf-trace-log.html'

    'true':
        'prefix': 'true'
        'body': 'true'
    'false':
        'prefix': 'false'
        'body': 'false'
    'null':
        'prefix': 'null'
        'body': 'null'

    'Regular Expression':
        'prefix': '~/'
        'body': '~/${1:<pattern>}/${2:<modifier>};$0'
        'description': 'Regular expression'
        'descriptionMoreURL': 'https://haxe.org/manual/std-regex.html'

    'package':
        'prefix': 'package '
        'body': 'package ${1:<name>};$0'
    'import':
        'prefix': 'import'
        'body': 'import ${1:<package>};$0'
        'description': 'Allow omitting the package name when using a type'
        'descriptionMoreURL': 'http://haxe.org/manual/type-system-import.html'
    'using':
        'prefix': 'using'
        'body': 'using ${1:<package>};$0'
        'description': 'Pseudo-extend existing types without modifying their source'
        'descriptionMoreURL': 'https://haxe.org/manual/lf-static-extension.html'
    'private':
        'prefix': 'private'
        'body': 'private '
    'public':
        'prefix': 'public'
        'body': 'public '
    'inline':
        'prefix': 'inline'
        'body': 'inline '
        'description': 'Allow insert function body in place'
        'descriptionMoreURL': 'https://haxe.org/manual/class-field-inline.html'
    'static':
        'prefix': 'static'
        'body': 'static '

    'if':
        'prefix': 'if'
        'body': 'if( ${1:condition} ) {\n\t$0\n}'
    'else':
        'prefix': 'else '
        'body': 'else {\n\t$0\n}'
    'else..if':
        'prefix': 'elseif'
        'body': 'else if( ${1:condition} ) {\n\t$0\n}'
    'if..else':
        'prefix': 'ifelse'
        'body': 'if( ${1:condition} ) \{\n\t${2:expr}\n\} else \{\n\t${3:expr}\n\}'

    'switch..case':
        'prefix': 'switch '
        'body': 'switch $1 \{\ncase ${2:expr}:\n\t$0\n}\n'
    'case':
        'prefix': 'case '
        'body': 'case ${1:expr}:\n\t${2:statement}\n'
    'default':
        'prefix': 'default:'
        'body': 'default:\n\t${1:statement}'
    'return':
        'prefix': 'return'
        'body': 'return$0'

    'while':
        'prefix': 'while'
        'body': 'while( ${1:true} ) {\n\t$2\n}$0'
    'do..while':
        'prefix': 'do '
        'body': 'do {\n\t$1\n} while( ${2:true} );$0'
    'continue':
        'prefix': 'continue'
        'body': 'continue;$0'
    'break':
        'prefix': 'break'
        'body': 'break;'

    'for i in 0...end':
        'prefix': 'fori'
        'body': 'for( ${1:var} in ${2:0}...${3:end} ) {\n\t${4:expr}\n}$0'
    'for a in b':
        'prefix': 'for'
        'body': 'for( ${1:value} in ${2:iterable} ) {\n\t$3\n}\n$0'

    'try':
        'prefix': 'try'
        'body': 'try {\n\t$1\n} catch(${2:e:Dynamic}) {\n\t${3:trace(e);}\n}$0'
    'catch':
        'prefix': 'catch'
        'body': 'catch(${1:e:Dynamic}) {\n\t${2:trace(e);}\n}\n$0'
    'throw':
        'prefix': 'throw'
        'body': 'throw ${1:expr};$0'

    'cast':
        'prefix': 'cast'
        'body': 'cast( ${1:expr}, ${2:type} )$0'
    'cast ':
        'prefix': 'cast '
        'body': 'cast ${1:expr}$0'

    'autotyped var':
        'prefix': 'v'
        'body': 'var ${1:name} ${2:: ${3:Type}}${4: = }$5;$0'
    'typed var':
        'prefix': 'var'
        'body': 'var ${1:name} : ${2:Type} ${3:= }$4;$0'
    'private var':
        'prefix': 'prv'
        'body': 'private var $1 ${2:: ${3:Type}};$0'
    'private static var':
        'prefix': 'prsv'
        'body': 'private static var $1 ${2:: ${3:Type}};$0'
    'private static inline var':
        'prefix': 'prsiv'
        'body': 'private static inline var $1 ${2:: ${3:Type}} = $4;$0'
    'public var':
        'prefix': 'pv'
        'body': 'public var $1 ${2:: ${3:Type}};$0'
    'public static var':
        'prefix': 'psv'
        'body': 'public static var $1 ${2:: ${3:Type}};$0'
    'public static inline var':
        'prefix': 'psiv'
        'body': 'public static inline var ${1:NAME} ${2:: ${3:Type}} = $4;$0'

    'property':
        'prefix': 'prop'
        'body': 'public var ${1:name}(${2:get},${3:set}) : ${4:Type};$0'
    'getter':
        'prefix': 'get_'
        'body': 'function get_${1:name}() : ${2:Type} \{\n\treturn $3;\n\}$0'
    'setter':
        'prefix': 'set_'
        'body': 'function set_${1:name}(${2:v}:${3:Type}) : ${3:Type} \{\n\treturn $4;\n\}$0'

    'dynamic':
        'prefix': 'dynamic function'
        'body': 'dynamic function ${1:<name>}($2) {}$0'
    'function':
        'prefix': 'function'
        'body': 'function ${1:name}( ${2:params} )${3: : ${4:Void}} \{\n\t$5\n\}$0'
    'method':
        'prefix': 'static function'
        'body': '${1:static }${2:inline }function ${3:name}($4)${5: : ${6:Void}} \{\n\t$0\n\}'
    'macro function':
        'prefix': 'macro'
        'body': 'macro public static function ${1:name}( ${2:e : haxe.macro.Expr} ) : haxe.macro.Expr \{\n\t$0\n\}'

    'class':
        'prefix': 'class '
        'body': '\nclass ${1:Name} ${2:extends ${3:SuperClass}} ${4:implements ${5:Interface}} \{\n\n\tpublic function new() \{\n\t\t${6:super();\n\t\t}$7\n\t\}\n\t$8\n\}\n$0'
        'description': 'Primary data structure'
        'descriptionMoreURL': 'http://haxe.org/manual/types-class-instance.html'
    'enum':
        'prefix': 'enum'
        'body': 'enum ${1:Name} {\n\t$0\n}'
        'description': 'Enumeration type'
        'descriptionMoreURL': 'http://haxe.org/manual/types-enum-instance.html'
    'interface':
        'prefix': 'interface'
        'body': 'interface ${1:Interface} ${2:implements ${3:Interface}} {\n\t$0\n}'
        'description': 'Signature of a class'
        'descriptionMoreURL': 'http://haxe.org/manual/types-interfaces.html'
    'typedef':
        'prefix': 'typedef'
        'body': 'typedef ${1:Name} = $2'
    'abstract':
        'prefix': 'abstract'
        'body': 'abstract ${1:Name}(${2:Type}) {\n\n\tpublic inline function new( ${3:v} : ${2:Type} ) {\n\t\tthis = ${3:v};\n\t}\n}$0'
        'description': 'Abstract type'
        'descriptionMoreURL': 'http://haxe.org/manual/types-abstract.html'
    'extern class':
        'prefix': 'extern class '
        'body': 'extern ${1:TYPE} {\n\t$2\n}\n$0'

    '@:metadata':
        'prefix': '@:'
        'body': '@:${1:name}${2:($3)}$0'
        'description': 'Built-in Compiler Metadata'
        'descriptionMoreURL': 'http://haxe.org/manual/lf-metadata.html#built-in-compiler-metadata'
    '@metadata':
        'prefix': '@'
        'body': '@${1:name}${2:($3)}$0'
        'description': 'Custom Metadata'
        'descriptionMoreURL': 'http://haxe.org/manual/lf-metadata.html'

    'main class':
        'prefix': 'class'
        'body': 'class ${1:<Class>} \{\n\n\tpublic function new() {\n\t\t$0\n\t\}\n\n\tstatic function main() \{\n\t\tnew ${1:Class}();\n\t\}\n\}'
    'main':
        'prefix': 'main'
        'body': 'static function main() {\n\t$0\n}'

    'private function':
        'prefix': 'prf'
        'body': 'private function ${1:name}($2)${3: : ${4:Void}} {\n\t$0\n}'
    'private inline function':
        'prefix': 'prif'
        'body': 'private inline function ${1:name}($2)${3: : ${4:Void}} {\n\t$0\n}'
    'private static function':
        'prefix': 'prsf'
        'body': 'private static function ${1:name}($2)${3: : ${4:Void}} {\n\t$0\n}'
    'private static inline function':
        'prefix': 'prsif'
        'body': 'private static inline function ${1:name}($2)${3: : ${4:Void}} {\n\t$0\n}'

    'public function':
        'prefix': 'pf'
        'body': 'public function ${1:name}($2)${3: : ${4:Void}} {\n\t$0\n}'
    'public inline function':
        'prefix': 'pif'
        'body': 'public inline function ${1:name}($2)${3: : ${4:Void}} {\n\t$0\n}'
    'public static function':
        'prefix': 'psf'
        'body': 'public static function ${1:name}($2)${3: : ${4:Void}} {\n\t$0\n}'
    'public static inline function':
        'prefix': 'psif'
        'body': 'public static inline function ${1:name}($2)${3: : ${4:Void}} {\n\t$0\n}'

    'Array<T>':
        'prefix': 'Array'
        'body': 'Array<${1:T}>$0'
        'description': 'Collection of elements'
        'descriptionMoreURL': 'http://api.haxe.org/Array.html'
    'ArrayAccess<T>':
        'prefix': 'ArrayAccess<T>'
        'body': 'ArrayAccess<${1:T}>$0'
    'Bool':
        'prefix': 'Bool'
        'body': 'Bool$0'
    'Class<T>':
        'prefix': 'Class'
        'body': 'Class<${1:T}>$0'
    'Date':
        'prefix': 'Date'
        'body': 'Date$0'
    'Dynamic':
        'prefix': 'Dynamic'
        'body': 'Dynamic$0'
    'EReg':
        'prefix': 'EReg'
        'body': 'EReg( ${1:r}, ${2:opt} )$0'
    'Float':
        'prefix': 'Float'
        'body': 'Float$0'
    'Int':
        'prefix': 'Int'
        'body': 'Int$0'
    'List<T>':
        'prefix': 'List'
        'body': 'List<${1:T}>$0'
        'description': 'A linked-list of elements'
        'descriptionMoreURL': 'http://api.haxe.org/List.html'
    'Map<K,V>':
        'prefix': 'Map<K,V>'
        'body': 'Map<${1:K},${2:V}>$0'
        'description': 'Key to value mapping for arbitrary value types'
        'descriptionMoreURL': 'http://api.haxe.org/Map.html'
    'Math':
        'prefix': 'Math'
        'body': 'Math$0'
    'Null<T>':
        'prefix': 'Null<T>'
        'body': 'Null<${1:T}>$0'
    'Reflect':
        'prefix': 'Reflect'
        'body': 'Reflect.$0'
        'description': 'Runtime reflection of types and fields'
        'descriptionMoreURL': 'http://haxe.org/manual/std-reflection.html'
    'Single':
        'prefix': 'Single'
        'body': 'Single$0'
        'description': 'Single-precision IEEE 32bit float (4-byte)'
    'Std':
        'prefix': 'Std'
        'body': 'Std.$0'
        'description': 'Standard methods for manipulating basic types'
    'String':
        'prefix': 'String'
        'body': 'String$0'
    'StringBuf':
        'prefix': 'StringBuf'
        'body': 'StringBuf$0'
    'StringTools':
        'prefix': 'StringTools'
        'body': 'StringTools$0'
    'Type':
        'prefix': 'Type'
        'body': 'Type$0'
    'UInt':
        'prefix': 'UInt'
        'body': 'UInt$0'
    'ValueType':
        'prefix': 'ValueType'
        'body': 'ValueType$0'
    'Void':
        'prefix': 'Void'
        'body': 'Void$0'
    'Xml':
        'prefix': 'Xml'
        'body': 'Xml$0'
    'XmlType':
        'prefix': 'XmlType'
        'body': 'XmlType$0'
